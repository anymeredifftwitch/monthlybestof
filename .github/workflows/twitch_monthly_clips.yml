# .github/workflows/twitch_monthly_clips.yml
name: Twitch Monthly Top Clips

on:
  schedule:
    # Exécute le 1er de chaque mois à 13:00 UTC (15:00 CEST à Herve)
    - cron: '0 15 1 * *'
  workflow_dispatch: # Permet de déclencher manuellement le workflow

jobs:
  build-and-upload:
    runs-on: ubuntu-latest

    steps:
    - name: ⬇️ Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python 3.x
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: ⚙️ Install dependencies (yt-dlp, ffmpeg, python)
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: 📁 Create data and output directories
      run: |
        mkdir -p data/raw_clips
        mkdir -p output
        echo "Data and output directories created."

    - name: 📊 Get Top Twitch Clips
      env:
        TWITCH_CLIENT_ID: ${{ secrets.TWITCH_CLIENT_ID }}
        TWITCH_CLIENT_SECRET: ${{ secrets.TWITCH_CLIENT_SECRET }}
      run: python scripts/get_top_clips.py

    - name: 📥 Download Individual Clips and Extract Frames
      run: python scripts/download_clips.py

    - name: 🎬 Compile Video
      run: python scripts/compile_video.py

    # --- Étape pour sauvegarder la vidéo finale en artefact ---
    - name: ⬆️ Upload Compiled Video as Artifact
      uses: actions/upload-artifact@v4
      with:
        name: compiled-twitch-video
        path: output/compiled_video.mp4
        retention-days: 1
        if-no-files-found: ignore
    # -----------------------------------------------------------

    - name: 📝 Generate Video Metadata
      run: python scripts/generate_metadata.py

    - name: 🏞️ Generate Thumbnail
      run: python scripts/generate_thumbnail.py

    - name: 📤 Upload to YouTube
      env:
        YOUTUBE_CLIENT_ID: ${{ secrets.YOUTUBE_CLIENT_ID }}
        YOUTUBE_CLIENT_SECRET: ${{ secrets.YOUTUBE_CLIENT_SECRET }}
        YOUTUBE_REFRESH_TOKEN: ${{ secrets.YOUTUBE_REFRESH_TOKEN }}
      run: python scripts/upload_youtube.py

    - name: 🧹 Clean up temporary files
      if: always()
      run: |
        rm -rf data/
        rm -rf output/
        echo "Temporary data and output directories cleaned."
